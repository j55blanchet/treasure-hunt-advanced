{"version":3,"sources":["/src/sketch.ts","/src/dragon.ts","/src/baseClasses/rectObject.ts","/src/baseClasses/rectObstacle.ts"],"names":[],"mappings":"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","file":"","sourcesContent":["import 'p5'\r\nimport { Dragon, Direction } from './dragon'\r\nimport { RectObstacle } from './baseClasses/rectObstacle'\r\n\r\nrequire('p5/lib/addons/p5.sound')\r\n//require('p5/lib/addons/p5.dom')\r\n\r\n\r\nvar sketch = function (p: p5) {\r\n  let anyP: any = p;\r\n  \r\n  const USEDKEYCODES = [anyP.LEFT_ARROW, anyP.RIGHT_ARROW, anyP.UP_ARROW, anyP.DOWN_ARROW]\r\n  let keysDown = {}\r\n\r\n  let dragon: Dragon\r\n  let obstacles: Array<RectObstacle>\r\n  \r\n\r\n  function getKeyDirection(): Direction {\r\n\r\n    let hasRight = keysDown[anyP.RIGHT_ARROW] && !keysDown[anyP.LEFT_ARROW]\r\n    let hasLeft  = keysDown[anyP.LEFT_ARROW] && !keysDown[anyP.RIGHT_ARROW]\r\n    let hasUp    = keysDown[anyP.UP_ARROW] && !keysDown[anyP.DOWN_ARROW]\r\n    let hasDown  = keysDown[anyP.DOWN_ARROW] && !keysDown[anyP.UP_ARROW]\r\n\r\n    if (hasUp && hasRight) {    return Direction.UpRight    }\r\n    if (hasDown && hasRight) {  return Direction.DownRight  }\r\n    if (hasDown && hasLeft){    return Direction.DownLeft   }\r\n    if (hasUp && hasLeft) {     return Direction.UpLeft     }\r\n\r\n    if (hasRight) { return Direction.Right }\r\n    if (hasLeft) { return Direction.Left }\r\n    if (hasUp) { return Direction.Up }\r\n    if (hasDown) { return Direction.Down }\r\n    return Direction.None\r\n  }\r\n\r\n  p.preload = () => {\r\n    Dragon.loadSprites(p);\r\n  }\r\n\r\n  p.setup = function () {\r\n    p.createCanvas(p.windowWidth, p.windowHeight)\r\n    p.frameRate(60);\r\n\r\n    dragon = new Dragon(p.windowWidth / 2, p.windowHeight / 2, 100, 72, Direction.Left);\r\n    obstacles = [\r\n      new RectObstacle(0, 0, p.windowWidth, 20, p.color(20)),\r\n      new RectObstacle(0, 0, 20, p.windowHeight, p.color(20)),\r\n      new RectObstacle(p.windowWidth - 20, 0, 20, p.windowHeight, p.color(20)),\r\n      new RectObstacle(0, p.windowHeight - 20, p.windowWidth, 20, p.color(20))\r\n    ]\r\n  }\r\n\r\n  p.draw = function () {\r\n\r\n    p.background(100);\r\n\r\n    obstacles.forEach(obs => {\r\n      obs.draw(p);\r\n    })\r\n\r\n    dragon.draw(p);\r\n    \r\n    if(p.keyIsPressed) {\r\n      let direction = getKeyDirection();\r\n      dragon.tryMove(direction, 10);\r\n\r\n      let isValidMove = true;\r\n      obstacles.forEach(obs => {\r\n        if (obs.overlapsWith(dragon)) {\r\n          isValidMove = false;\r\n        }\r\n      })\r\n      \r\n      if (isValidMove) { dragon.commitMove(); }\r\n      else             { dragon.abortMove(direction, 10);  }\r\n    }\r\n  }\r\n\r\n  p.keyPressed = function() {\r\n    if (USEDKEYCODES.indexOf(p.keyCode) !== -1) {\r\n      keysDown[p.keyCode] = true\r\n    }\r\n  }\r\n  p.keyReleased = function() {\r\n    keysDown[p.keyCode] = undefined\r\n  }\r\n}\r\n\r\nnew p5(sketch)\r\n","import 'p5'\r\nimport { CtrRectObject } from './baseClasses/rectObject';\r\n\r\nexport enum Direction {\r\n    Up = 1,\r\n    Down,\r\n    Left,\r\n    Right,\r\n    UpLeft,\r\n    UpRight,\r\n    DownLeft,\r\n    DownRight,\r\n    None\r\n}\r\n\r\nfunction oppositeDirection(dir: Direction) {\r\n    switch (dir){\r\n    case Direction.Down:        return Direction.Up\r\n    case Direction.DownLeft:    return Direction.UpRight\r\n    case Direction.DownRight:   return Direction.UpLeft\r\n    case Direction.Left:        return Direction.Right\r\n    case Direction.Right:       return Direction.Left\r\n    case Direction.Up:          return Direction.Down\r\n    case Direction.UpLeft:      return Direction.DownRight\r\n    case Direction.UpRight:     return Direction.DownLeft\r\n\r\n    case Direction.None:        return Direction.None\r\n    }\r\n}\r\n\r\nexport class Dragon extends CtrRectObject {\r\n    static readonly FLAPS_PER_SECOND = 1;\r\n    static sprites: Array<p5.Image>\r\n\r\n    private currentSpriteIndex = 0;\r\n    private lastFlap = new Date().getTime();\r\n    private previousBearing = Direction.None;\r\n\r\n    constructor(x, y, width, height, public bearing: Direction) {\r\n            \r\n        super(x, y, width, height);\r\n        this.previousBearing = bearing;\r\n    }\r\n\r\n    get minX(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.ctrX - this.height / 2\r\n            default: return this.ctrX - this.width / 2\r\n        }\r\n    }\r\n    get maxX(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.ctrX + this.height / 2\r\n            default: return this.ctrX + this.width / 2\r\n        }\r\n    }\r\n    get minY(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.ctrY - this.width / 2\r\n            default: return this.ctrY - this.height / 2\r\n        }\r\n    }\r\n    get maxY(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.ctrY + this.width / 2\r\n            default: return this.ctrY + this.height / 2\r\n        }\r\n    }\r\n    get hitboxWidth(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.height;\r\n            default: return this.width;\r\n        }\r\n    } \r\n    get hitboxHeight(): number {\r\n        switch (this.bearing){\r\n            case Direction.Down, Direction.Up: return this.width;\r\n            default: return this.height;\r\n        }\r\n    }       \r\n    \r\n    draw(p: p5) {\r\n        p.push();\r\n\r\n        p.fill(255, 0, 0, 100);\r\n        p.noStroke();\r\n        p.rectMode(p.CORNER);\r\n        p.rect(this.minX, this.minY, this.hitboxWidth, this.hitboxHeight);\r\n\r\n        p.translate(this.ctrX, this.ctrY);\r\n        p.angleMode(p.DEGREES);\r\n        switch(this.bearing) {\r\n            case Direction.Right:\r\n                break;\r\n            case Direction.DownRight:\r\n                p.rotate(45)\r\n                break\r\n            case Direction.Down:\r\n                p.rotate(-90)\r\n                p.scale(-1, 1);\r\n                break\r\n            case Direction.DownLeft:\r\n                p.scale(-1.0, 1)\r\n                p.rotate(45)\r\n                break\r\n            case Direction.Left:\r\n                p.scale(-1.0, 1)\r\n                break\r\n            case Direction.UpLeft:\r\n                p.scale(-1.0, 1)\r\n                p.rotate(-45)\r\n                break\r\n            case Direction.Up:\r\n                p.rotate(-90);\r\n                break;\r\n            case Direction.UpRight:\r\n                p.rotate(-45)\r\n                break\r\n        }\r\n        p.imageMode(p.CENTER);\r\n\r\n        // Move to next image if it's time\r\n        let curTime = new Date().getTime();\r\n        if (curTime - this.lastFlap > (60 / Dragon.FLAPS_PER_SECOND)) {\r\n            this.lastFlap = curTime;\r\n            this.currentSpriteIndex += 1;\r\n            this.currentSpriteIndex %= Dragon.sprites.length;\r\n        }\r\n        \r\n        let image = Dragon.sprites[this.currentSpriteIndex];\r\n        p.image(image, 0, 0, this.width, this.height);\r\n\r\n        p.pop();\r\n    }\r\n\r\n    private adjustPostion(direction, pixels) {\r\n        let diagComponentPixels = pixels / Math.SQRT2;\r\n        switch (direction) {\r\n            case Direction.Right:\r\n                this.ctrX += pixels\r\n                break\r\n            case Direction.DownRight:\r\n                this.ctrX += diagComponentPixels\r\n                this.ctrY += diagComponentPixels\r\n                break\r\n            case Direction.Down:\r\n                this.ctrY += pixels\r\n                break\r\n            case Direction.DownLeft:\r\n                this.ctrY += diagComponentPixels\r\n                this.ctrX -= diagComponentPixels\r\n                break\r\n            case Direction.Left:\r\n                this.ctrX -= pixels\r\n                break\r\n            case Direction.UpLeft:\r\n                this.ctrX -= diagComponentPixels\r\n                this.ctrY -= diagComponentPixels\r\n                break\r\n            case Direction.Up:\r\n                this.ctrY -= pixels\r\n                break;\r\n            case Direction.UpRight:\r\n                this.ctrX += diagComponentPixels\r\n                this.ctrY -= diagComponentPixels\r\n                break\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    tryMove(direction, pixels) {\r\n        this.previousBearing = this.bearing;\r\n        this.bearing = direction;\r\n        this.adjustPostion(direction, pixels);\r\n    }\r\n\r\n    abortMove(direction, pixels) {\r\n        this.adjustPostion(oppositeDirection(direction), pixels);\r\n        this.bearing = this.previousBearing;\r\n    }\r\n\r\n    commitMove() {\r\n    }\r\n\r\n    public static loadSprites(p: p5) {\r\n        const FRAME_1 = require(\"./assets/frame-1.png\").default\r\n        const FRAME_2 = require('./assets/frame-2.png').default\r\n        const FRAME_3 = require('./assets/frame-3.png').default\r\n        const FRAME_4 = require('./assets/frame-4.png').default\r\n\r\n        Dragon.sprites = [\r\n            p.loadImage(FRAME_1),\r\n            p.loadImage(FRAME_2),\r\n            p.loadImage(FRAME_3),\r\n            p.loadImage(FRAME_4)\r\n        ]\r\n    }\r\n}","\r\n\r\nexport class CtrRectObject {\r\n\r\n    constructor(public ctrX: number, public ctrY: number, \r\n                public width: number, public height: number) {\r\n    }\r\n\r\n    get minX(): number {\r\n        return this.ctrX - this.width / 2;\r\n    }\r\n    get minY(): number {\r\n        return this.ctrY - this.height / 2;\r\n    }\r\n    get maxX(): number {\r\n        return this.ctrX + this.width / 2;\r\n    }\r\n    get maxY(): number {\r\n        return this.ctrY + this.height / 2;\r\n    }\r\n\r\n    overlapsWith(other: CtrRectObject) {\r\n        return !(this.minX > other.maxX || \r\n                 this.maxX < other.minX ||\r\n                 this.minY > other.maxY || \r\n                 this.maxY < other.minY)\r\n\r\n    }\r\n}\r\n\r\nexport class TLRectObject extends CtrRectObject {\r\n    constructor(tlX: number, tlY: number, width: number, height: number) {\r\n        super(tlX + width / 2, tlY + height / 2, width, height);\r\n    }\r\n}","\r\nimport { TLRectObject } from './rectObject';\r\nimport 'p5';\r\n\r\nexport class RectObstacle extends TLRectObject {\r\n\r\n    constructor(tlX: number, tlY: number, width: number, height: number, \r\n                public fillColor?: p5.Color, \r\n                public strokeColor?: p5.Color) {\r\n        super(tlX, tlY, width, height);\r\n    }\r\n\r\n    draw(p: p5) {\r\n        p.push();\r\n\r\n        if (this.strokeColor) { p.stroke(this.strokeColor)}\r\n        else                  { p.noStroke(); }\r\n\r\n        if (this.fillColor) { p.fill(this.fillColor)}\r\n        else                { p.noFill(); }\r\n\r\n        p.rectMode(p.CENTER);\r\n        p.rect(this.ctrX, this.ctrY, this.width, this.height);\r\n        p.pop();\r\n    }\r\n\r\n}"]}